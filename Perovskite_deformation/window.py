# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'perovskite_deformation_with_signals.ui'
#
# Created by: PyQt5 UI code generator 5.15.3
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from calculation import Calculation
from fileworker import fileworker
import os


class Ui_my_window(object):
    def __init__(self):
        self.im_data = None
        self.array_1 = None
        self.array_2 = None

    def setupUi(self, my_window):
        my_window.setObjectName("my_window")
        my_window.resize(1098, 707)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(my_window.sizePolicy().hasHeightForWidth())
        my_window.setSizePolicy(sizePolicy)
        self.centralwidget = QtWidgets.QWidget(my_window)
        self.centralwidget.setSizeIncrement(QtCore.QSize(1, 4))
        self.centralwidget.setBaseSize(QtCore.QSize(931, 756))
        self.centralwidget.setStyleSheet("")
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.top_layout = QtWidgets.QHBoxLayout()
        self.top_layout.setObjectName("top_layout")
        self.save_structureLayout = QtWidgets.QHBoxLayout()
        self.save_structureLayout.setObjectName("save_structureLayout")
        self.Rhombohedral = QtWidgets.QCheckBox(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.Rhombohedral.setFont(font)
        self.Rhombohedral.setIconSize(QtCore.QSize(25, 25))
        self.Rhombohedral.setObjectName("Rhombohedral")
        self.save_structureLayout.addWidget(self.Rhombohedral)
        self.Orthorombic = QtWidgets.QCheckBox(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.Orthorombic.setFont(font)
        self.Orthorombic.setAutoFillBackground(False)
        self.Orthorombic.setIconSize(QtCore.QSize(25, 25))
        self.Orthorombic.setCheckable(True)
        self.Orthorombic.setChecked(False)
        self.Orthorombic.setTristate(False)
        self.Orthorombic.setObjectName("Orthorombic")
        self.save_structureLayout.addWidget(self.Orthorombic)
        self.Save_structure = QtWidgets.QPushButton(self.centralwidget)
        self.Save_structure.setEnabled(True)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.Save_structure.setFont(font)
        self.Save_structure.setStyleSheet("background-color: rgb(255, 255, 127);")
        self.Save_structure.setObjectName("Save_structure")
        self.save_structureLayout.addWidget(self.Save_structure)
        self.top_layout.addLayout(self.save_structureLayout)
        spacerItem = QtWidgets.QSpacerItem(30, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.top_layout.addItem(spacerItem)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.R = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.R.setFont(font)
        self.R.setLineWidth(2)
        self.R.setObjectName("R")
        self.horizontalLayout.addWidget(self.R)
        self.get_R = QtWidgets.QLineEdit(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.get_R.sizePolicy().hasHeightForWidth())
        self.get_R.setSizePolicy(sizePolicy)
        self.get_R.setMaximumSize(QtCore.QSize(40, 20))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.get_R.setFont(font)
        self.get_R.setObjectName("get_R")
        self.horizontalLayout.addWidget(self.get_R)
        self.B = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.B.setFont(font)
        self.B.setLineWidth(2)
        self.B.setObjectName("B")
        self.horizontalLayout.addWidget(self.B)
        self.get_B = QtWidgets.QLineEdit(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.get_B.sizePolicy().hasHeightForWidth())
        self.get_B.setSizePolicy(sizePolicy)
        self.get_B.setMaximumSize(QtCore.QSize(40, 20))
        self.get_B.setSizeIncrement(QtCore.QSize(1, 10))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.get_B.setFont(font)
        self.get_B.setObjectName("get_B")
        self.horizontalLayout.addWidget(self.get_B)
        self.top_layout.addLayout(self.horizontalLayout)
        spacerItem1 = QtWidgets.QSpacerItem(18, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.top_layout.addItem(spacerItem1)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.import_out_button = QtWidgets.QPushButton(self.centralwidget)
        self.import_out_button.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.import_out_button.setFont(font)
        self.import_out_button.setStyleSheet("background-color: rgb(0, 255, 0);\n"
"border-color: rgb(0, 0, 255);")
        self.import_out_button.setIconSize(QtCore.QSize(25, 25))
        self.import_out_button.setObjectName("import_out_button")
        self.horizontalLayout_2.addWidget(self.import_out_button)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem2)
        self.name = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setItalic(True)
        font.setWeight(75)
        self.name.setFont(font)
        self.name.setLineWidth(2)
        self.name.setObjectName("name")
        self.horizontalLayout_2.addWidget(self.name)
        self.get_name = QtWidgets.QLineEdit(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.get_name.sizePolicy().hasHeightForWidth())
        self.get_name.setSizePolicy(sizePolicy)
        self.get_name.setMaximumSize(QtCore.QSize(80, 20))
        self.get_name.setSizeIncrement(QtCore.QSize(1, 10))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.get_name.setFont(font)
        self.get_name.setObjectName("get_name")
        self.horizontalLayout_2.addWidget(self.get_name)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem3)
        self.Check_buttom = QtWidgets.QPushButton(self.centralwidget)
        self.Check_buttom.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Check_buttom.sizePolicy().hasHeightForWidth())
        self.Check_buttom.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.Check_buttom.setFont(font)
        self.Check_buttom.setStyleSheet("background-color: rgb(0, 255, 0);\n"
"border-color: rgb(0, 0, 255);")
        self.Check_buttom.setIconSize(QtCore.QSize(25, 25))
        self.Check_buttom.setObjectName("Check_buttom")
        self.horizontalLayout_2.addWidget(self.Check_buttom)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem4)
        self.clear_but = QtWidgets.QPushButton(self.centralwidget)
        self.clear_but.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.clear_but.setFont(font)
        self.clear_but.setStyleSheet("background-color: rgb(0, 255, 0);\n"
"border-color: rgb(0, 0, 255);")
        self.clear_but.setObjectName("clear_but")
        self.horizontalLayout_2.addWidget(self.clear_but)
        self.top_layout.addLayout(self.horizontalLayout_2)
        self.verticalLayout_5.addLayout(self.top_layout)
        self.bot_layout = QtWidgets.QHBoxLayout()
        self.bot_layout.setObjectName("bot_layout")
        self.left_panel = QtWidgets.QVBoxLayout()
        self.left_panel.setObjectName("left_panel")
        self.import_results_textedit = QtWidgets.QTextEdit(self.centralwidget)
        self.import_results_textedit.setEnabled(True)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.import_results_textedit.setFont(font)
        self.import_results_textedit.setFrameShape(QtWidgets.QFrame.Box)
        self.import_results_textedit.setFrameShadow(QtWidgets.QFrame.Plain)
        self.import_results_textedit.setLineWidth(2)
        self.import_results_textedit.setLineWrapMode(QtWidgets.QTextEdit.WidgetWidth)
        self.import_results_textedit.setObjectName("import_results_textedit")
        self.left_panel.addWidget(self.import_results_textedit)
        self.button_layout = QtWidgets.QVBoxLayout()
        self.button_layout.setObjectName("button_layout")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.ave_AA = QtWidgets.QPushButton(self.centralwidget)
        self.ave_AA.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.ave_AA.setFont(font)
        self.ave_AA.setStyleSheet("background-color: rgb(255, 127, 127);\n"
"alternate-background-color: rgb(0, 255, 0);")
        self.ave_AA.setObjectName("ave_AA")
        self.gridLayout.addWidget(self.ave_AA, 0, 0, 1, 1)
        self.ave_AB = QtWidgets.QPushButton(self.centralwidget)
        self.ave_AB.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.ave_AB.setFont(font)
        self.ave_AB.setStyleSheet("background-color: rgb(255, 127, 127);\n"
"alternate-background-color: rgb(0, 255, 0);")
        self.ave_AB.setObjectName("ave_AB")
        self.gridLayout.addWidget(self.ave_AB, 0, 1, 1, 1)
        self.ave_BB = QtWidgets.QPushButton(self.centralwidget)
        self.ave_BB.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.ave_BB.setFont(font)
        self.ave_BB.setStyleSheet("background-color: rgb(255, 127, 127);\n"
"alternate-background-color: rgb(0, 255, 0);")
        self.ave_BB.setObjectName("ave_BB")
        self.gridLayout.addWidget(self.ave_BB, 0, 2, 1, 1)
        self.ave_AO = QtWidgets.QPushButton(self.centralwidget)
        self.ave_AO.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.ave_AO.setFont(font)
        self.ave_AO.setStyleSheet("background-color: rgb(255, 127, 127);\n"
"alternate-background-color: rgb(0, 255, 0);")
        self.ave_AO.setObjectName("ave_AO")
        self.gridLayout.addWidget(self.ave_AO, 1, 0, 1, 1)
        self.ave_BO = QtWidgets.QPushButton(self.centralwidget)
        self.ave_BO.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.ave_BO.setFont(font)
        self.ave_BO.setStyleSheet("background-color: rgb(255, 127, 127);\n"
"alternate-background-color: rgb(0, 255, 0);")
        self.ave_BO.setObjectName("ave_BO")
        self.gridLayout.addWidget(self.ave_BO, 1, 1, 1, 1)
        self.ave_OO = QtWidgets.QPushButton(self.centralwidget)
        self.ave_OO.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.ave_OO.setFont(font)
        self.ave_OO.setStyleSheet("background-color: rgb(255, 127, 127);\n"
"alternate-background-color: rgb(0, 255, 0);")
        self.ave_OO.setObjectName("ave_OO")
        self.gridLayout.addWidget(self.ave_OO, 1, 2, 1, 1)
        self.button_layout.addLayout(self.gridLayout)
        self.ave_2 = QtWidgets.QHBoxLayout()
        self.ave_2.setObjectName("ave_2")
        self.ave_AA_BB = QtWidgets.QPushButton(self.centralwidget)
        self.ave_AA_BB.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.ave_AA_BB.setFont(font)
        self.ave_AA_BB.setStyleSheet("background-color: rgb(255, 127, 127);\n"
"alternate-background-color: rgb(0, 255, 0);")
        self.ave_AA_BB.setObjectName("ave_AA_BB")
        self.ave_2.addWidget(self.ave_AA_BB)
        self.maxmin_AB = QtWidgets.QPushButton(self.centralwidget)
        self.maxmin_AB.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.maxmin_AB.setFont(font)
        self.maxmin_AB.setStyleSheet("background-color: rgb(255, 127, 127);\n"
"alternate-background-color: rgb(0, 255, 0);")
        self.maxmin_AB.setObjectName("maxmin_AB")
        self.ave_2.addWidget(self.maxmin_AB)
        self.ave_Theta = QtWidgets.QPushButton(self.centralwidget)
        self.ave_Theta.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.ave_Theta.setFont(font)
        self.ave_Theta.setStyleSheet("background-color: rgb(255, 127, 127);\n"
"alternate-background-color: rgb(0, 255, 0);")
        self.ave_Theta.setObjectName("ave_Theta")
        self.ave_2.addWidget(self.ave_Theta)
        self.button_layout.addLayout(self.ave_2)
        self.deform = QtWidgets.QGridLayout()
        self.deform.setObjectName("deform")
        self.def_AA = QtWidgets.QPushButton(self.centralwidget)
        self.def_AA.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.def_AA.setFont(font)
        self.def_AA.setStyleSheet("background-color: rgb(255, 127, 127);\n"
"alternate-background-color: rgb(0, 255, 0);")
        self.def_AA.setObjectName("def_AA")
        self.deform.addWidget(self.def_AA, 0, 0, 1, 1)
        self.def_AB = QtWidgets.QPushButton(self.centralwidget)
        self.def_AB.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.def_AB.setFont(font)
        self.def_AB.setStyleSheet("background-color: rgb(255, 127, 127);\n"
"alternate-background-color: rgb(0, 255, 0);")
        self.def_AB.setObjectName("def_AB")
        self.deform.addWidget(self.def_AB, 0, 1, 1, 1)
        self.def_BB = QtWidgets.QPushButton(self.centralwidget)
        self.def_BB.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.def_BB.setFont(font)
        self.def_BB.setStyleSheet("background-color: rgb(255, 127, 127);\n"
"alternate-background-color: rgb(0, 255, 0);")
        self.def_BB.setObjectName("def_BB")
        self.deform.addWidget(self.def_BB, 0, 2, 1, 1)
        self.def_AO = QtWidgets.QPushButton(self.centralwidget)
        self.def_AO.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.def_AO.setFont(font)
        self.def_AO.setStyleSheet("background-color: rgb(255, 127, 127);\n"
"alternate-background-color: rgb(0, 255, 0);")
        self.def_AO.setObjectName("def_AO")
        self.deform.addWidget(self.def_AO, 1, 0, 1, 1)
        self.def_BO = QtWidgets.QPushButton(self.centralwidget)
        self.def_BO.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.def_BO.setFont(font)
        self.def_BO.setStyleSheet("background-color: rgb(255, 127, 127);\n"
"alternate-background-color: rgb(0, 255, 0);")
        self.def_BO.setObjectName("def_BO")
        self.deform.addWidget(self.def_BO, 1, 2, 1, 1)
        self.button_layout.addLayout(self.deform)
        self.band_toleran = QtWidgets.QHBoxLayout()
        self.band_toleran.setObjectName("band_toleran")
        self.tolerance_factor = QtWidgets.QPushButton(self.centralwidget)
        self.tolerance_factor.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.tolerance_factor.setFont(font)
        self.tolerance_factor.setStyleSheet("background-color: rgb(255, 127, 127);\n"
"alternate-background-color: rgb(0, 255, 0);")
        self.tolerance_factor.setObjectName("tolerance_factor")
        self.band_toleran.addWidget(self.tolerance_factor)
        self.bandwidth = QtWidgets.QPushButton(self.centralwidget)
        self.bandwidth.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.bandwidth.setFont(font)
        self.bandwidth.setStyleSheet("background-color: rgb(255, 127, 127);\n"
"alternate-background-color: rgb(0, 255, 0);")
        self.bandwidth.setObjectName("bandwidth")
        self.band_toleran.addWidget(self.bandwidth)
        self.button_layout.addLayout(self.band_toleran)
        self.Calculate_all = QtWidgets.QPushButton(self.centralwidget)
        self.Calculate_all.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.Calculate_all.setFont(font)
        self.Calculate_all.setStyleSheet("background-color: rgb(255, 127, 127);\n"
"alternate-background-color: rgb(0, 255, 0);")
        self.Calculate_all.setObjectName("Calculate_all")
        self.button_layout.addWidget(self.Calculate_all)
        self.left_panel.addLayout(self.button_layout)
        self.bot_layout.addLayout(self.left_panel)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.bot_layout.addLayout(self.horizontalLayout_4)
        self.right_layout = QtWidgets.QVBoxLayout()
        self.right_layout.setObjectName("right_layout")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.variables = QtWidgets.QTextEdit(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.variables.setFont(font)
        self.variables.setStyleSheet("")
        self.variables.setFrameShape(QtWidgets.QFrame.Box)
        self.variables.setFrameShadow(QtWidgets.QFrame.Plain)
        self.variables.setLineWidth(2)
        self.variables.setObjectName("variables")
        self.horizontalLayout_3.addWidget(self.variables)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.label_3.setFont(font)
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.verticalLayout.addWidget(self.label_3)
        self.Export_AA_AB_BB = QtWidgets.QPushButton(self.centralwidget)
        self.Export_AA_AB_BB.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.Export_AA_AB_BB.setFont(font)
        self.Export_AA_AB_BB.setStyleSheet("background-color: rgb(255, 127, 127);")
        self.Export_AA_AB_BB.setObjectName("Export_AA_AB_BB")
        self.verticalLayout.addWidget(self.Export_AA_AB_BB)
        self.Export_AO_BO = QtWidgets.QPushButton(self.centralwidget)
        self.Export_AO_BO.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.Export_AO_BO.setFont(font)
        self.Export_AO_BO.setStyleSheet("background-color: rgb(255, 127, 127);")
        self.Export_AO_BO.setObjectName("Export_AO_BO")
        self.verticalLayout.addWidget(self.Export_AO_BO)
        self.Export_OO = QtWidgets.QPushButton(self.centralwidget)
        self.Export_OO.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.Export_OO.setFont(font)
        self.Export_OO.setStyleSheet("background-color: rgb(255, 127, 127);")
        self.Export_OO.setObjectName("Export_OO")
        self.verticalLayout.addWidget(self.Export_OO)
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setText("")
        self.label_4.setObjectName("label_4")
        self.verticalLayout.addWidget(self.label_4)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setText("")
        self.label_2.setObjectName("label_2")
        self.verticalLayout.addWidget(self.label_2)
        self.label = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        font.setStrikeOut(False)
        font.setKerning(True)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.Angle_B_B_B = QtWidgets.QPushButton(self.centralwidget)
        self.Angle_B_B_B.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.Angle_B_B_B.setFont(font)
        self.Angle_B_B_B.setStyleSheet("background-color: rgb(255, 127, 127);")
        self.Angle_B_B_B.setObjectName("Angle_B_B_B")
        self.verticalLayout.addWidget(self.Angle_B_B_B)
        self.Angle_B_O_B = QtWidgets.QPushButton(self.centralwidget)
        self.Angle_B_O_B.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.Angle_B_O_B.setFont(font)
        self.Angle_B_O_B.setStyleSheet("background-color: rgb(255, 127, 127);")
        self.Angle_B_O_B.setObjectName("Angle_B_O_B")
        self.verticalLayout.addWidget(self.Angle_B_O_B)
        self.horizontalLayout_3.addLayout(self.verticalLayout)
        self.right_layout.addLayout(self.horizontalLayout_3)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.calculated = QtWidgets.QTextEdit(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.calculated.setFont(font)
        self.calculated.setAutoFillBackground(False)
        self.calculated.setStyleSheet("")
        self.calculated.setFrameShape(QtWidgets.QFrame.Box)
        self.calculated.setFrameShadow(QtWidgets.QFrame.Plain)
        self.calculated.setLineWidth(2)
        self.calculated.setObjectName("calculated")
        self.verticalLayout_2.addWidget(self.calculated)
        self.Report_buttom_layout = QtWidgets.QHBoxLayout()
        self.Report_buttom_layout.setObjectName("Report_buttom_layout")
        self.make_report = QtWidgets.QPushButton(self.centralwidget)
        self.make_report.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.make_report.setFont(font)
        self.make_report.setStyleSheet("background-color: rgb(255, 127, 127);\n"
"alternate-background-color: rgb(0, 255, 0);")
        self.make_report.setObjectName("make_report")
        self.Report_buttom_layout.addWidget(self.make_report)
        spacerItem5 = QtWidgets.QSpacerItem(80, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.Report_buttom_layout.addItem(spacerItem5)
        self.Save_results = QtWidgets.QPushButton(self.centralwidget)
        self.Save_results.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.Save_results.setFont(font)
        self.Save_results.setStyleSheet("background-color: rgb(255, 127, 127);\n"
"alternate-background-color: rgb(0, 255, 0);")
        self.Save_results.setObjectName("Save_results")
        self.Report_buttom_layout.addWidget(self.Save_results)
        spacerItem6 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.Report_buttom_layout.addItem(spacerItem6)
        self.export_to_file = QtWidgets.QPushButton(self.centralwidget)
        self.export_to_file.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.export_to_file.setFont(font)
        self.export_to_file.setStyleSheet("background-color: rgb(255, 127, 127);\n"
"alternate-background-color: rgb(0, 255, 0);")
        self.export_to_file.setObjectName("export_to_file")
        self.Report_buttom_layout.addWidget(self.export_to_file)
        self.verticalLayout_2.addLayout(self.Report_buttom_layout)
        self.right_layout.addLayout(self.verticalLayout_2)
        self.bot_layout.addLayout(self.right_layout)
        self.verticalLayout_5.addLayout(self.bot_layout)
        my_window.setCentralWidget(self.centralwidget)
        self.toolBar = QtWidgets.QToolBar(my_window)
        self.toolBar.setObjectName("toolBar")
        my_window.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.toolBar_2 = QtWidgets.QToolBar(my_window)
        self.toolBar_2.setObjectName("toolBar_2")
        my_window.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar_2)


        self.retranslateUi(my_window)
        self.Save_structure.clicked.connect(self.imput_structure)
        self.import_out_button.clicked.connect(self.showDialogRead)
        self.Check_buttom.clicked.connect(self.parser)

        self.ave_AA.clicked.connect(self.calculate_ave_RR_func)
        self.ave_AB.clicked.connect(self.calculate_ave_RB_func)
        self.ave_BB.clicked.connect(self.calculate_ave_BB_func)
        self.ave_AO.clicked.connect(self.calculate_ave_RO_func)
        self.ave_BO.clicked.connect(self.calculate_ave_BO_func)
        self.ave_OO.clicked.connect(self.calculate_ave_OO_func)
        self.maxmin_AB.clicked.connect(self.calculate_maxmin_RB_func)
        self.ave_AA_BB.clicked.connect(self.calculate_ave_RRBB_func)
        self.ave_Theta.clicked.connect(self.calculate_ave_Theta_func)
        self.def_AA.clicked.connect(self.calculate_def_RR_func)
        self.def_AB.clicked.connect(self.calculate_def_RB_func)
        self.def_BB.clicked.connect(self.calculate_def_BB_func)
        self.def_AO.clicked.connect(self.calculate_def_RO_func)
        self.def_BO.clicked.connect(self.calculate_def_BO_func)
        self.tolerance_factor.clicked.connect(self.calculate_tolerance_func)
        self.bandwidth.clicked.connect(self.calculate_bandwidth_func)
        self.Calculate_all.clicked.connect(self.calc_all_func)
        self.clear_but.clicked.connect(self.clear_all_func)

        self.export_to_file.clicked.connect(self.showDialogWrite)
        # self.Export_AA_AB_BB.clicked.connect(my_window.export_cation_cation_func)
        # self.Export_AO_BO.clicked.connect(my_window.export_cation_anion_func)
        # self.Export_OO.clicked.connect(my_window.export_OO_func)
        # self.Angle_B_B_B.clicked.connect(my_window.export_BBB_func)
        # self.Angle_B_O_B.clicked.connect(my_window.export_BOB_func)
        self.make_report.clicked.connect(self.make_report_func)
        QtCore.QMetaObject.connectSlotsByName(my_window)

        self.click_count = 0
    def imput_structure(self):
        if self.Rhombohedral.isChecked():
            self.struc = 0
            self.Orthorombic.setEnabled(False)
            self.Rhombohedral.setEnabled(False)
            print('\n rombohedral')
        if self.Orthorombic.isChecked():
            self.struc = 1
            self.Orthorombic.setEnabled(False)
            self.Rhombohedral.setEnabled(False)
            print('\n orhorombic')
        self.import_out_button.setEnabled(True)
        self.clear_but.setEnabled(True)

    def showDialogRead(self):

        self.variables.clear()
        self.calculated.clear()
        self.im_data = fileworker.showDialogRead(fileworker)
        self.import_results_textedit.setText(str(self.im_data))
        self.Check_buttom.setEnabled(True)

    def parser(self):
        print('\n ##########click##########\n')
        line = self.im_data.split('\n')
        length = len(line)

        self.R = self.get_R.text()
        self.B = self.get_B.text()
        self.name = self.get_name.text()
        self.all_etalons = ['param']
        self.all_variables = [self.name]
        self.array_RR = []
        self.array_RB = []
        self.array_BB = []
        self.array_RO = []
        self.array_BO = []
        self.array_OO = []

        self.index = Ui_my_window.get_index(self, line)
        print('aaaaa', self.index)
        index_last_O = 0
        if self.struc == 0:
            index_last_O=self.index[2]
        if self.struc == 1:
            index_last_O = self.index[3]

        end_O = Ui_my_window.end_dist(self, line, index_last_O, length)

        qq = {}
        j = int(0)
        for i in range(self.index[0], length):
            qq[j] = line[i].split()
            j = j + 1

        endR = int(self.index[1])-int(self.index[0])-1
        startB = endR+2
        endB = int(self.index[2])-int(self.index[0]) - 1
        startO2 = []
        endO2 = []

        if self.struc==0:
            startO2 = endB + 2
            endO2 = int(end_O) - int(self.index[0])

        if self.struc==1:
            startO1 = endB+2
            endO1 = int(self.index[3])-int(self.index[0]) - 1
            startO2 = endO1+2
            endO2 = int(end_O) - int(self.index[0])

        for_R = Ui_my_window.remove_simbols(self, qq, 1, endR)
        for_R_sym = Ui_my_window.split_sym(self, for_R)
        for_R_val = Ui_my_window.split_val(self, for_R)
        for_R_value = Ui_my_window.del_breaket(self, for_R_val)
        index_RO = Ui_my_window.find_RO(self, for_R_sym)
        index_RO_1= index_RO[0]
        index_RO_2= index_RO[1]
        RO1_value = Ui_my_window.find_value(self, for_R_value, index_RO_1)
        RO2_value = Ui_my_window.find_value(self, for_R_value, index_RO_2)
        RO1_value.sort()
        RO2_value.sort()
        self.array_RO =  Ui_my_window.finish_list_RO(self, RO1_value, RO2_value)
        print('RO:= \n',self.array_RO,'\n')

        index_RR = Ui_my_window.find_RR(self, for_R_sym)
        RR_value = Ui_my_window.find_value(self, for_R_value, index_RR)
        RR_value.sort()
        self.array_RR = Ui_my_window.finish_list_cation(self, RR_value)
        print('RR:= \n', self.array_RR,'\n')

        index_RB = Ui_my_window.find_RB(self, for_R_sym)
        RB_value = Ui_my_window.find_value(self, for_R_value, index_RB)
        RB_value.sort()
        self.array_RB = Ui_my_window.finish_list_cation(self, RB_value)
        print('RB:= \n', self.array_RB,'\n')

        for_B = Ui_my_window.remove_simbols(self,qq, startB, endB)
        for_B_sym = Ui_my_window.split_sym(self, for_B)
        for_B_val = Ui_my_window.split_val(self, for_B)
        for_B_value = Ui_my_window.del_breaket(self, for_B_val)
        index_BO = Ui_my_window.find_BO(self, for_B_sym)
        index_BO_1 =index_BO[0]
        index_BO_2 =index_BO[1]
        BO1_value = Ui_my_window.find_value(self, for_B_value, index_BO_1)
        BO2_value = Ui_my_window.find_value(self, for_B_value, index_BO_2)
        self.array_BO = Ui_my_window.finish_list_BO(self, BO1_value, BO2_value)
        print('BO:= \n', self.array_BO,'\n')

        index_BB = Ui_my_window.find_BB(self, for_B_sym)
        BB_value = Ui_my_window.find_value(self, for_B_value, index_BB)
        BB_value.sort()
        self.array_BB = Ui_my_window.finish_list_cation(self, BB_value)
        print('BB:= \n', self.array_BB,'\n')

        for_O2 = Ui_my_window.remove_simbols(self, qq, startO2, endO2)
        for_O2_sym = Ui_my_window.split_sym(self, for_O2)
        for_O2_val = Ui_my_window.split_val(self, for_O2)
        for_O2_value = Ui_my_window.del_breaket(self, for_O2_val)
        index_O2 = Ui_my_window.find_OO2(self, for_O2_sym)
        index_O2_O2 = index_O2[0]
        index_O2_O1 = index_O2[1]
        O2O2_value = Ui_my_window.find_value(self, for_O2_value, index_O2_O2)
        O2O2_value.sort()
        O2O1_value = Ui_my_window.find_value(self, for_O2_value, index_O2_O1)
        O2O1_value.sort()
        self.array_OO = Ui_my_window.finish_list_OO(self, O2O2_value, O2O1_value)
        print('OO:= \n', self.array_OO,'\n')

        etalonRR = []
        etalonRB = []
        etalonBB = []
        etalonRO = []
        etalonBO = []
        etalonOO = []

        if self.struc == 0:
            etalonRR = ['6*' + str(self.R)]
            etalonRB = ['2-' + str(self.B), '6*' + str(self.B)]
            etalonBB = ['6*' + str(self.B)]
            etalonRO = ['3-O', '6-O', '3-O']
            etalonBO = ['6-O']
            etalonOO = ['4-O', '4*O']

        if self.struc == 1:
            etalonRR = ['2*' + str(self.R), '2*' + str(self.R), '2*' + str(self.R)]
            etalonRB = ['2-' + str(self.B), '2*' + str(self.B), '2*' + str(self.B), '2*' + str(self.B)]
            etalonBB = ['2*' + str(self.B), '4*' + str(self.B)]
            etalonRO = ['1-O1', '2-O2', '1-O1', '2-O2', '2-O2', '1-O1', '1-O1', '2-O2']
            etalonBO = ['2-O2', '2-O1', '2-O2']
            etalonOO = ['2-O2', '1-O1', '1*O1', '1-O1', '1*O1', '2*O2']

        z=[]
        if self.array_RR==z:
            self.variables.append('\n Перерахуйте віддалі RR із більшим радіусом координаційної сфери \n')
        else:
            self.ave_AA.setEnabled(True)
            self.def_AA.setEnabled(True)
            Ui_my_window.input_variables(self, str(self.R), etalonRR, self.array_RR)

        if self.array_RB==z:
            self.variables.append('\n Перерахуйте віддалі RB із більшим радіусом координаційної сфери \n')
        else:
            self.ave_AB.setEnabled(True)
            self.def_AB.setEnabled(True)
            self.maxmin_AB.setEnabled(True)
            Ui_my_window.input_variables(self, str(self.R), etalonRB, self.array_RB)

        if self.array_BB==z:
            self.variables.append('\n Перерахуйте віддалі BB із більшим радіусом координаційної сфери \n')
        else:
            self.ave_BB.setEnabled(True)
            self.def_BB.setEnabled(True)
            self.ave_AA_BB.setEnabled(True)
            Ui_my_window.input_variables(self, str(self.B), etalonBB, self.array_BB)

        self.ave_AO.setEnabled(True)
        self.ave_BO.setEnabled(True)
        self.ave_OO.setEnabled(True)
        self.def_AO.setEnabled(True)
        self.def_BO.setEnabled(True)
        self.tolerance_factor.setEnabled(True)

        Ui_my_window.input_variables(self, str(self.R), etalonRO, self.array_RO)
        Ui_my_window.input_variables(self, str(self.B), etalonBO, self.array_BO)
        Ui_my_window.input_variables(self, 'O2', etalonOO, self.array_OO)

## кути
# масив qq зміщений від зчитаного масиву line на значення index[0] - номер рядка, де знаходиться лантаноїд
        if self.struc == 0:
            numb = 2
        if self.struc == 1:
            numb = 1
        self.value_BOB = []
        self.value_BBB = []

        if int(end_O)+numb != length:
            start_angle = Ui_my_window.find_angle_index(self, line, endO2, length)
            start_angle_ind = int(start_angle)-int(self.index[0])
            end_angle_ind = int(length)-int(self.index[0])-1
            for_angle = Ui_my_window.remove_symbols_angle(self, qq, start_angle_ind,  end_angle_ind)
            array_angles = Ui_my_window.make_array_angle(self, for_angle)
            angle_val = array_angles[3]
            angle_value = Ui_my_window.del_breaket(self, angle_val)

            etalon_BBB = []
            etalon_BOB = []

            if self.struc == 0:
                etalon_BBB = [str(self.B) + '-' + str(self.B) + '-' + str(self.B),
                              str(self.B) + '-' + str(self.B) + '-' + str(self.B),
                              str(self.B) + '-' + str(self.B) + '-' + str(self.B)]
                index_BBB = Ui_my_window.get_index_BBB(self, array_angles[0], array_angles[1], array_angles[2])
                value_BBB = Ui_my_window.find_value(self, angle_value, index_BBB)
                if len(value_BBB) != 0:
                    self.value_BBB.append(value_BBB[0])
                    self.value_BBB.append(value_BBB[2])
                    self.value_BBB.append(value_BBB[4])
                else:
                    self.value_BBB = value_BBB
                etalon_BOB = [str(self.B) + '-' + 'O' + '-' + str(self.B)]
                index_BOB = Ui_my_window.get_index_BOB(self, array_angles[0], array_angles[1], array_angles[2])
                value_BOB = Ui_my_window.find_value(self, angle_value, index_BOB)
                self.value_BOB = value_BOB

            if self.struc == 1:

                etalon_BBB = [str(self.B) + '-' + str(self.B) + '-' + str(self.B),
                              str(self.B) + '-' + str(self.B) + '-' + str(self.B),
                              str(self.B) + '-' + str(self.B) + '-' + str(self.B),
                              str(self.B) + '-' + str(self.B) + '-' + str(self.B),
                              str(self.B) + '-' + str(self.B) + '-' + str(self.B)]
                index_BBB = Ui_my_window.get_index_BBB(self, array_angles[0], array_angles[1], array_angles[2])
                self.value_BBB = Ui_my_window.find_value(self, angle_value, index_BBB)

                etalon_BOB = [str(self.B) + '-' + 'O1' + '-' + str(self.B), str(self.B) + '-' + 'O2' + '-' + str(self.B)]
                index_BOB = Ui_my_window.get_index_BOB(self, array_angles[0], array_angles[1], array_angles[2])
                index_BOB_O1 = index_BOB[0]
                index_BOB_O2 = index_BOB[1]
                value_BOB_O1 = Ui_my_window.find_value(self, angle_value, index_BOB_O1)
                value_BOB_O2 = Ui_my_window.find_value(self, angle_value, index_BOB_O2)
                self.value_BOB.append(value_BOB_O1[0])
                self.value_BOB.append(value_BOB_O2[0])

            if self.value_BBB == z:
                self.variables.append('\n Перерахуйте кут B-B-B із більшим радіусом координаційної сфери \n')
            else:
                Ui_my_window.input_variables_angle(self, etalon_BBB, self.value_BBB)

            if self.value_BOB == z:
                self.variables.append('\n Перерахуйте кут B-O-B із більшим радіусом координаційної сфери \n')
            else:
                self.ave_Theta.setEnabled(True)
                Ui_my_window.input_variables_angle(self, etalon_BOB, self.value_BOB)
        else:
            self.variables.append('\n Перерахуйте кути із більшим радіусом координаційної сфери \n')
# формуємо дані для запису
        self.etalon_list_calc = ['<RR>', '<RB>', '<BB>', '<RO>_cn=8','<RO>_cn=9', '<RO>_cn=10','<RO>_cn=12', '<BO>', '<O2O2>',
                            '<O2O1>', '<OO>', 'RB(max/min', '<RR>/<BB>', 'deform(RR)',
                            'deform(RB)', 'deform(BB)', 'deform(RO)_cn=8', 'deform(RO)_cn=9', 'deform(RO)_cn=10',
                            'deform(RO)_cn=12', 'deform(BO)', 'ThetaZ', 'ThetaY', '<Theta>', 'tolerance_cn=8',
                            'tolerance_cn=9', 'tolerance_cn=10', 'tolerance_cn=12', 'bandwidth']
        self.result_list = []
        for i in range(len(self.etalon_list_calc)):
            self.result_list.append('*')

        self.all_etalons = self.all_etalons + Ui_my_window.get_etalons_list(self, self.R, etalonRR)
        self.all_etalons = self.all_etalons + Ui_my_window.get_etalons_list(self, self.R, etalonRB)
        self.all_etalons = self.all_etalons + Ui_my_window.get_etalons_list(self, self.B, etalonBB)
        self.all_etalons = self.all_etalons + Ui_my_window.get_etalons_list(self, self.R, etalonRO)
        self.all_etalons = self.all_etalons + Ui_my_window.get_etalons_list(self, self.B, etalonBO)
        self.all_etalons = self.all_etalons + Ui_my_window.get_etalons_list(self, 'O2', etalonOO)
        self.all_etalons = self.all_etalons + Ui_my_window.get_etalons_list(self, self.B+'-O-'+self.B, etalon_BOB)

        self.all_variables = self.all_variables + Ui_my_window.get_variables_list(self, etalonRR, self.array_RR)
        self.all_variables = self.all_variables + Ui_my_window.get_variables_list(self, etalonRB, self.array_RB)
        self.all_variables = self.all_variables + Ui_my_window.get_variables_list(self, etalonBB, self.array_BB)
        self.all_variables = self.all_variables + Ui_my_window.get_variables_list(self, etalonRO, self.array_RO)
        self.all_variables = self.all_variables + Ui_my_window.get_variables_list(self, etalonBO, self.array_BO)
        self.all_variables = self.all_variables + Ui_my_window.get_variables_list(self, etalonOO, self.array_OO)
        self.all_variables = self.all_variables + Ui_my_window.get_variables_list(self, etalon_BOB, self.value_BOB)


        self.bandwidth.setEnabled(True)
        self.Calculate_all.setEnabled(True)

    def get_index(self, line):
        number_of_line = []
        if self.R in line:
            indR = line.index(self.R)
            number_of_line.append(indR)
        if self.B in line:
            indB = line.index(self.B)
            number_of_line.append(indB)
        if self.struc == 0:
            if 'O' in line:
                indO = line.index('O')
                number_of_line.append(indO)
        if self.struc == 1:
            if 'O1' in line:
                indO1 = line.index('O1')
                number_of_line.append(indO1)
            if 'O2' in line:
                indO2 = line.index('O2')
                number_of_line.append(indO2)

        return number_of_line

    def end_dist(self, line, indO, length):

        for i in range(indO, length):
            if line[i].isspace():
                return i
            elif line[i] == '':
                return i

    def find_angle_index(self, line, start, end):
        angle_ind = 0
        n = 0

        for i in range(start+self.index[0], end):
            x = line[i]
            if 'Distances' in x:
                n = n + 1
                if 'and' in x:
                    n = n + 1
                    if 'Angles' in x:
                        n = n + 1
                        angle_ind= i+2

        return angle_ind

    def remove_simbols(self, mas, s, f):
        u = '..'
        z = '**'
        new_mas = []
        for i in range(s, f):
            a = mas[i]
            countu = a.count(u)
            if countu!=0:
                for p in range(countu):
                    a.remove(u)
            countz = a.count(z)
            if countz!=0:
                for p in range(countz):
                    a.remove(z)
            for j in range(len(a)):
                new_mas.append(a[j])

        return new_mas

    def remove_symbols_angle(self, mas, s, f):
        new_mas = []
        for i in range(s, f):
            a = mas[i]
            cleaned = Ui_my_window.del_alfavit(self, a)

            for j in range(len(a)):
                 new_mas.append(cleaned[j])
        return new_mas

    def del_alfavit(self, mas):
        t = [')','..', '--','**','[',']','0','0-1', '0-2','0-1-1', '2-1','1-1-1', '0-2-1','1', '1-1','0-1-1-1', '0-1-2', '0-2-1-1', '0-1-2-1',
             '0)', '1)', '2)', '3)', '4)', '5)', '6)', '7)', '8)', '9)', '10)', '11)', '12)', '13)'
             '11)','12)','13)','14)','15)',
             '(1)','(2)','(3)','(4)', '(5)', '(6)','(7)','(8)','(9)','(10)','(11)','(12)','(13)'
             '1', '2', '3', '4', '5', '6', '7', '8', '9', '0',
             'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',
             'k', 'l','m', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x','y', 'z'
             ]
        for i in range(len(t)):
            sym = t[i]
            counts = mas.count(sym)
            if counts != 0:
                for p in range(counts):
                    mas.remove(sym)
        if len(mas)!=4:
            print("del, alfavit", mas)
        return mas

    def split_sym(self, mas):
        sym_array = []
        for i in range(0,len(mas),2):
            sym_array.append(mas[i])

        return sym_array

    def make_array_angle(self, mass):
        row1 = []
        row2 = []
        row3 = []
        row4 = []

        for i in range(0, len(mass), 4):
            row1.append(mass[i])

        for i in range(1, len(mass), 4):
            row2.append(mass[i])

        for i in range(2, len(mass), 4):
            row3.append(mass[i])

        for i in range(3, len(mass), 4):
            row4.append(mass[i])

        return row1, row2, row3, row4

    def get_index_BBB(self, mas1, mas2, mas3):

        sym = str(self.B)+str(self.B)+str(self.B)
        end = Ui_my_window.index_angle(self, mas1, mas2, mas3, sym)

        return end

    def get_index_BOB(self, mas1, mas2, mas3):
        end1= []
        end2= []
        if self.struc == 0:
            o = 'O'
            sym = str(self.B)+str(o)+str(self.B)
            end = Ui_my_window.index_angle(self, mas1, mas2, mas3, sym)

            return end

        if self.struc == 1:
            o1 = 'O1'
            o2 = 'O2'
            sym1 = str(self.B) + str(o1) + str(self.B)
            sym2 = str(self.B) + str(o2) + str(self.B)
            ind_O1 = Ui_my_window.index_angle(self, mas1, mas2, mas3, sym1)
            end1 = end1 + ind_O1
            ind_O2 = Ui_my_window.index_angle(self, mas1, mas2, mas3, sym2)
            end2= end2+ind_O2

        return end1, end2

    def index_angle(self, mas1, mas2, mas3, sym):

        end = []
        for i in range(len(mas1)):
            sum = str(mas1[i])+str(mas2[i])+str(mas3[i])
            if sum == sym:
                end.append(i)

        return end

    def split_val(self, mas):
        val_array = []
        for i in range(1, len(mas), 2):
            val_array.append(mas[i])

        return val_array

    def del_breaket(self, mas):
        new_mas = []
        for i in range(len(mas)):
            a = mas[i]
            b = list(a)
            b.remove("(")
            b.remove(")")
            c = ''
            for p in b:
                c += '' + ''.join(p)
            new_mas.append(c)

        return new_mas

    def find_RO(self, sym):
        O1_ind = []
        O2_ind = []

        if self.struc == 0:
            all = []
            k = 0
            if sym[0] == '3-O':
                for i in range(len(sym)):
                    if sym[i] == '3-O':
                        O1_ind.append(i)
                    if sym[i] == '6-O':
                        O2_ind.append(i)

            if sym[0] == 'O':
                for i in range(len(sym)):
                    all.append(i)

                for i in range(len(all)):
                    if k==0:
                        O1_ind.append(i)
                    if k==6:
                        O2_ind.append(i)
                    if k==len(sym)-1:
                        O1_ind.append(i)
                    k = k + 1

        if self.struc == 1:
            if sym[0] == '1-O1' or sym[0] == '2-O2':
                for i in range(len(sym)):
                    if sym[i] == '1-O1':
                        O1_ind.append(i)
                    if sym[i] == '2-O2':
                        O2_ind.append(i)

            if sym[0]=='O1' or sym[0]=='O2':
                for i in range(len(sym)):
                    if sym[i]=='O1':
                        O1_ind.append(i)
                    if sym[i]=='O2':
                        O2_ind.append(i)

        return O1_ind,O2_ind

    def find_value(self, value, ind):
        new_value = []
        for j in range(len(ind)):
            for i in range(len(value)):
                if ind[j]==i:
                    new_value.append(value[i])

        return new_value

    def finish_list_RO(self, one, two):
        finish_RO = []
        if self.struc==0:
            if len(one) == 2:
                if len(two) == 1:
                    finish_RO.append(one[0])
                    finish_RO.append(two[0])
                    finish_RO.append(one[1])

        if self.struc==1:
            if len(two)==4:
                k=1
            if len(two)==8:
                k=2
            finish_RO.append(one[0])
            finish_RO.append(two[0])
            finish_RO.append(one[1])
            finish_RO.append(two[1*k])
            finish_RO.append(two[2*k])
            finish_RO.append(one[2])
            finish_RO.append(one[3])
            finish_RO.append(two[3*k])

        return finish_RO

    def find_BO(self, sym):
        O1_ind = []
        O2_ind = []

        if self.struc == 0:
            if sym[0] == '6-O' or sym[0] == 'O':
                for i in range(len(sym)):
                    if sym[i] == '6-O':
                        O1_ind.append(i)
                        O2_ind.append(i)
                    if sym[i] == 'O':
                        O1_ind.append(i)
                        O2_ind.append(i)
                        break

        if self.struc == 1:
            if sym[0] == '2-O2' or sym[0] == '2-O1' or sym[0] == '4-O2':
                for i in range(len(sym)):
                    if sym[i] == '2-O1':
                        O1_ind.append(i)
                    if sym[i] == '2-O2':
                        O2_ind.append(i)
                    if sym[i] == '4-O2':
                        O2_ind.append(i)
                        O2_ind.append(i)

            if sym[0]=='O1' or sym[0]=='O2':
                for i in range(len(sym)):
                    if sym[i]=='O1':
                        O1_ind.append(i)
                    if sym[i]=='O2':
                        O2_ind.append(i)


        return O1_ind,O2_ind

    def finish_list_BO(self, one, two):
        finish_BO = []
        if len(one)!=len(two):
            finish_BO.append(two[0])
            finish_BO.append(one[0])
            finish_BO.append(two[1])
        else:
            finish_BO.append(one[0])

        return finish_BO

    def find_OO2(self, sym):
        o1 = []
        o2 = []
        if self.struc == 0:
            z = []
            x = []
            all = []
            k = 0
            zz = '4-O'
            xx = '4*O'
            oo = 'O'
            for i in range(len(sym)):
                if sym[i] == zz:
                    z.append(i)
                if sym[i] == xx:
                    x.append(i)
                if sym[i] == oo:
                    all.append(i)

            if len(all)!= 0:
                o1.append(all[0])
                o2.append(all[1])
            else:
                o1.append(z[0])
                o2.append(x[1])

        if self.struc == 1:
            z='1-'+str(self.B)
            k= sym[0]
            if k==z:
                for i in range(len(sym)):
                    if sym[i]=='2-O2':
                        o1.append(i)
                    if sym[i] == '1-O1':
                        o2.append(i)
                    if sym[i] == '1*O1':
                        o2.append(i)
                    if sym[i] == '2*O2':
                        o1.append(i)

            if sym[0]==self.B:
                for i in range(len(sym)):
                    if sym[i] == 'O2':
                        o1.append(i)
                    if sym[i] == 'O1':
                        o2.append(i)

        return o1,o2

    def finish_list_OO(self, one, two):
        finish_OO = []

        if self.struc == 0:
            if len(one) == len(two):
                finish_OO.append(one[0])
                finish_OO.append(two[0])

        if self.struc == 1:
            print('one\n', one, 'two \n', two)
            finish_OO.append(one[0])
            finish_OO.append(two[0])
            finish_OO.append(two[1])
            finish_OO.append(two[2])
            finish_OO.append(two[3])
            if one[0] == one[1]:
                if float(one[2]) <=3.2:
                    finish_OO.append(one[2])
                else:
                    finish_OO.append(one[1])
            else:
                finish_OO.append(one[1])

        return finish_OO

    def find_RR(self, sym):
        ind = []
        if self.struc == 0:
            z = '6*' + str(self.R)
            for i in range(len(sym)):
                if sym[i] == z:
                    ind.append(i)

            for i in range(len(sym)):
                if sym[i] == str(self.R):
                    ind.append(i)
                    break

        if self.struc == 1:
            z = '2*'+str(self.R)
            x = '2-'+str(self.R)
            if sym[0]=='1-O1' or sym[0]=='2-O2':
                for i in range(len(sym)):
                    if sym[i]==x:
                        ind.append(i)
                    if sym[i]==z:
                        ind.append(i)

            if sym[0]=='O1' or sym[0]=='O2':
                for i in range(len(sym)):
                    if sym[i]==self.R:
                        ind.append(i)

        return ind

    def find_RB(self, sym):
        ind = []
        all = []
        if self.struc == 0:
            k = 0
            z = '6*' + str(self.B)
            m = '2-' + str(self.B)
            for i in range(len(sym)):
                if sym[i] == m:
                    ind.append(i)
                if sym[i] == z:
                    ind.append(i)

            for i in range(len(sym)):
                if sym[i] == str(self.B):
                    all.append(i)
                    k = k + 1
            if k != 0:
                ind.append(all[0])
                ind.append(all[5])

        if self.struc == 1:
            z = '2*'+str(self.B)
            m = '2-'+str(self.B)
            if sym[0]=='1-O1' or sym[0]=='2-O2':
                for i in range(len(sym)):
                    if sym[i] == z or sym[i] == m:
                        ind.append(i)

            if sym[0] == 'O1' or sym[0] == 'O2':
                for i in range(len(sym)):
                    if sym[i] == self.B:
                        ind.append(i)

        return ind

    def find_BB(self, sym):
        ind = []
        all = []
        if self.struc == 0:
            k = 0
            z = '6*' + str(self.B)
            for i in range(len(sym)):
                if sym[i] == z:
                    ind.append(i)

            for i in range(len(sym)):
                if sym[i] == str(self.B):
                    all.append(i)
                    k = k + 1
            if k != 0:
                ind.append(all[2])

        if self.struc == 1:
            z = '2*' + str(self.B)
            m = '4*' + str(self.B)
            if sym[0] == '2-O1' or sym[0] == '2-O2':
                for i in range(len(sym)):
                    if sym[i] == z or sym[i] == m:
                        ind.append(i)

            if sym[0] == 'O1' or sym[0] == 'O2':
                for i in range(len(sym)):
                    if sym[i] == self.B:
                        ind.append(i)
        return ind

    def finish_list_cation(self, mas):
        z=[]
        if mas==z:
            print('\n Перерахуйте віддалі із більшим радіусом координаційної сфери')
        return mas

    def input_variables(self, a, etalon, mas):
        for i in range(len(etalon)):
            name = ' '+str(a)+'-'+str(etalon[i])
            value = '     '+str(mas[i])
            line = name + value
            self.variables.append(line)
        self.variables.append('\n')

    def input_variables_angle(self,  etalon, mas):
        for i in range(len(etalon)):
            line = ' '+str(etalon[i])+'     '+str(mas[i])
            self.variables.append(line)
        self.variables.append('\n')

# Функція розрахунку, кнопки

    def calculate_ave_RR_func(self):
        Ui_my_window.clicker_any(self)
        z = []
        if self.array_RR == z:
            print("Перерахувати у більшій коордиаційній сфері \n")

        else:
            self.ave_RR_val = Calculation.average_cation_cation(self.array_RR)
            self.result_list[0] = self.ave_RR_val
            self.calculated.append('<RR>=' + str(self.ave_RR_val))
            print('<RR>=', self.ave_RR_val)

    def calculate_ave_RB_func(self):
        Ui_my_window.clicker_any(self)
        z = []

        if self.array_RB == z:
            print("Перерахувати у більшій коордиаційній сфері \n")

        else:
            self.ave_RB_val = Calculation.average_cation_cation(self.array_RB)
            self.result_list[1] = self.ave_RB_val
            self.calculated.append('<RB>= ' + str(self.ave_RB_val))
            print('<RB>= ', self.ave_RB_val)

    def calculate_ave_BB_func(self):
        Ui_my_window.clicker_any(self)
        z = []
        if self.array_BB == z:
            print("Перерахувати у більшій коордиаційній сфері \n")
        elif self.struc == 1:
            self.ave_BB_val = Calculation.average_BB(self.array_BB)
            self.result_list[2] = self.ave_BB_val
            self.calculated.append('<BB>=' + str(self.ave_BB_val))
            print('<BB>=', self.ave_BB_val)

        elif self.struc == 0:
            self.ave_BB_val = Calculation.average_BB_rh(self.array_BB)
            self.result_list[2] = self.ave_BB_val
            self.calculated.append('<BB>=' + str(self.ave_BB_val))
            print('<BB>=', self.ave_BB_val)

    def calculate_ave_RO_func(self):
        Ui_my_window.clicker_any(self)
        z = []
        if self.array_RO == z:
            print("Перерахувати у більшій коордиаційній сфері \n")
        elif self.struc == 1:
            self.ave_RO_val = Calculation.average_RO(self.array_RO)
            self.result_list[3] = self.ave_RO_val[0]
            self.result_list[4] = self.ave_RO_val[1]
            self.result_list[5] = self.ave_RO_val[2]
            self.result_list[6] = self.ave_RO_val[3]
            self.calculated.append('<RO>cn8= ' + str(self.ave_RO_val[0]))
            self.calculated.append('<RO>cn9= ' + str(self.ave_RO_val[1]))
            self.calculated.append('<RO>cn10= ' + str(self.ave_RO_val[2]))
            self.calculated.append('<RO>cn12= ' + str(self.ave_RO_val[3]))
            print('<RO>=', self.ave_RO_val)

        elif self.struc == 0:
            self.ave_RO_val = Calculation.average_RO_rh(self.array_RO)
            self.result_list[4] = self.ave_RO_val[0]
            self.result_list[6] = self.ave_RO_val[1]
            self.calculated.append('<RO>cn9= ' + str(self.ave_RO_val[0]))
            self.calculated.append('<RO>cn12= ' + str(self.ave_RO_val[1]))
            print('<RO>=', self.ave_RO_val)

    def calculate_ave_BO_func(self):
        Ui_my_window.clicker_any(self)
        z = []
        if self.array_BO == z:
            print("Перерахувати у більшій коордиаційній сфері \n")
        elif self.struc == 1:
            self.ave_BO_val = Calculation.average_BO(self.array_BO)
            self.result_list[7] = self.ave_BO_val
            self.calculated.append('<BO>= ' + str(self.ave_BO_val))
            print('<BO>= ', self.ave_BO_val)
        elif self.struc == 0:
            self.ave_BO_val = Calculation.average_BO_rh(self.array_BO)
            self.result_list[7] = self.ave_BO_val
            self.calculated.append('<BO>= ' + str(self.ave_BO_val))
            print('<BO>= ', self.ave_BO_val)

    def calculate_ave_OO_func(self):
        Ui_my_window.clicker_any(self)
        z = []
        if self.array_OO == z:
            print("Перерахувати у більшій коордиаційній сфері \n")
        elif self.struc == 1:
            self.ave_OO_val = Calculation.average_OO(self.array_OO)
            self.result_list[8] = self.ave_OO_val[0]
            self.result_list[9] = self.ave_OO_val[1]
            self.result_list[10] = self.ave_OO_val[2]
            self.calculated.append('<O2O2>= ' + str(self.ave_OO_val[0]))
            self.calculated.append('<O2O1>= ' + str(self.ave_OO_val[1]))
            self.calculated.append('<OO>= ' + str(self.ave_OO_val[2]))
            print('<OO>', self.ave_OO_val)

        elif self.struc == 0:
            self.ave_OO_val = Calculation.average_OO_rh(self.array_OO)
            self.result_list[10] = self.ave_OO_val
            self.calculated.append('<OO>= ' + str(self.ave_OO_val))
            print('<OO>', self.ave_OO_val)

    def calculate_maxmin_RB_func(self):
        Ui_my_window.clicker_any(self)
        z = []
        if self.array_RB == z:
            print("Перерахувати у більшій коордиаційній сфері \n")
        elif self.struc == 1:
            self.maxmin_RB_val = Calculation.maxmin_RB(self.array_RB)
            self.result_list[11] = self.maxmin_RB_val
            self.calculated.append('max/min (RB)= ' + str(self.maxmin_RB_val))
            print('max/min (RB)= ', self.maxmin_RB_val)

        elif self.struc == 0:
            self.maxmin_RB_val = Calculation.maxmin_RB_rh(self.array_RB)
            self.result_list[11] = self.maxmin_RB_val
            self.calculated.append('max/min (RB)= ' + str(self.maxmin_RB_val))
            print('max/min (RB)= ', self.maxmin_RB_val)


    def calculate_ave_RRBB_func(self):
        Ui_my_window.clicker_any(self)
        z = []
        if self.array_RR == z or self.array_BB == z:
            print("Перерахувати у більшій коордиаційній сфері \n")
        elif self.struc == 1:
            self.ave_RR_BB_val = round(Calculation.average_cation_cation(self.array_RR)/Calculation.average_BB(self.array_BB), 5)
            self.result_list[12] = self.ave_RR_BB_val
            self.calculated.append('<RR>/<BB>= ' + str(self.ave_RR_BB_val))
            print('<RR>/<BB>= ', self.ave_RR_BB_val)

        elif self.struc == 0:
            self.ave_RR_BB_val = round(Calculation.average_cation_cation(self.array_RR)/Calculation.average_BB_rh(self.array_BB), 5)
            self.result_list[12] = self.ave_RR_BB_val
            self.calculated.append('<RR>/<BB>= ' + str(self.ave_RR_BB_val))
            print('<RR>/<BB>= ', self.ave_RR_BB_val)


    def calculate_def_RR_func(self):
        Ui_my_window.clicker_any(self)
        z = []
        if self.array_RR == z:
            print("Перерахувати у більшій коордиаційній сфері \n")
        elif self.struc == 1:
            print('tetsssadsadsadsads')
            self.def_RR_def = round(Calculation.deformation(self.array_RR,
                                                            Calculation.average_cation_cation(self.array_RR), 6), 7)
            self.result_list[13] = self.def_RR_def
            self.calculated.append('deform(RR)= ' + str(self.def_RR_def))
            print('deform(RR)= ', self.def_RR_def)

        elif self.struc == 0:
            print('deform(RR)= rh ')

    def calculate_def_RB_func(self):
        Ui_my_window.clicker_any(self)
        z = []
        if self.array_RB == z:
            print("Перерахувати у більшій коордиаційній сфері \n")
        elif self.struc == 1:
            self.def_RB_def = round(Calculation.deformation(self.array_RB,
                                                        Calculation.average_cation_cation(self.array_RB), 8), 7)
            self.result_list[14] = self.def_RB_def
            self.calculated.append('deform(RB)= ' + str(self.def_RB_def))
            print('deform(RB)= ', self.def_RB_def)

        elif self.struc == 0:
            self.def_RB_def = round(Calculation.deformation_RB_rh(self.array_RB,
                                                        Calculation.average_cation_cation(self.array_RB), 8), 7)
            self.result_list[14] = self.def_RB_def
            self.calculated.append('deform(RB)= ' + str(self.def_RB_def))
            print('deform(RB)= ', self.def_RB_def)

    def calculate_def_BB_func(self):
        Ui_my_window.clicker_any(self)
        z = []
        if self.array_BB == z:
            print("Перерахувати у більшій коордиаційній сфері \n")
        elif self.struc == 1:
            self.def_BB_def = round(Calculation.deformation_BB(self.array_BB, Calculation.average_BB(self.array_BB)), 7)
            self.result_list[15] = self.def_BB_def
            self.calculated.append('deform(BB)= ' + str(self.def_BB_def))
            print('deform(BB)= ', self.def_BB_def)

        elif self.struc == 0:
            print('deform(BB) _rh= ')

    def calculate_def_RO_func(self):
        Ui_my_window.clicker_any(self)
        z = []
        if self.array_RO == z:
            print("Перерахувати у більшій коордиаційній сфері \n")
        elif self.struc == 1:
            self.def_RO_def = Calculation.deformation_RO(self.array_RO, Calculation.average_RO(self.array_RO))
            self.result_list[16] = self.def_RO_def[0]
            self.result_list[17] = self.def_RO_def[1]
            self.result_list[18] = self.def_RO_def[2]
            self.result_list[19] = self.def_RO_def[3]
            self.calculated.append('deform(RO) cn8= ' + str(self.def_RO_def[0]))
            self.calculated.append('deform(RO) cn9= ' + str(self.def_RO_def[1]))
            self.calculated.append('deform(RO) cn10= ' + str(self.def_RO_def[2]))
            self.calculated.append('deform(RO) cn12= ' + str(self.def_RO_def[3]))
            print('deform(RO) =', self.def_RO_def)

        elif self.struc == 0:
            print('asdsadasdsadsadasd')
            self.def_RO_def = Calculation.deformation_RO_rh(self.array_RO, Calculation.average_RO_rh(self.array_RO))
            self.result_list[17] = self.def_RO_def[0]
            self.result_list[19] = self.def_RO_def[1]
            self.calculated.append('deform(RO) cn9= ' + str(self.def_RO_def[0]))
            self.calculated.append('deform(RO) cn12= ' + str(self.def_RO_def[1]))
            print('deform(RO) =', self.def_RO_def)

    def calculate_def_BO_func(self):
        Ui_my_window.clicker_any(self)
        z = []
        if self.array_BO == z:
            print("Перерахувати у більшій коордиаційній сфері \n")
        elif self.struc == 1:
            self.def_BO_def = Calculation.deformation(self.array_BO, Calculation.average_BO(self.array_BO), 6)
            self.result_list[20] = self.def_BO_def
            self.calculated.append('deform(BO)= ' + str(self.def_BO_def))
            print('deform(BO)= ', self.def_BO_def)

        elif self.struc == 0:
            print('deformation BO == 0')

    def calculate_ave_Theta_func(self):
        Ui_my_window.clicker_any(self)
        z = []
        if self.value_BOB == z:
            print("Перерахувати у більшій коордиаційній сфері \n")
        elif self.struc == 1:
            self.ave_Theta_val = Calculation.average_Theta(self.value_BOB)
            self.result_list[21] = self.ave_Theta_val[0]
            self.result_list[22] = self.ave_Theta_val[1]
            self.result_list[23] = self.ave_Theta_val[2]
            self.calculated.append('<ThetaZ> =' + str(self.ave_Theta_val[0]))
            self.calculated.append('<ThetaY> = ' + str(self.ave_Theta_val[1]))
            self.calculated.append('<Theta> = ' + str(self.ave_Theta_val[2]))
            print('<Theta> =', self.ave_Theta_val)

        elif self.struc == 0:
            self.ave_Theta_val = Calculation.average_Theta_rh(self.value_BOB)
            self.result_list[21] = self.ave_Theta_val
            self.calculated.append('<Theta> =' + str(self.ave_Theta_val))
            print('<Theta> =', self.ave_Theta_val)


    def calculate_tolerance_func(self):
        Ui_my_window.clicker_any(self)
        z = []
        if self.array_RO == z or self.array_BO == z:
            print("Перерахувати у більшій коордиаційній сфері \n")
        elif self.struc == 1:
            self.tolerance_factor_val = Calculation.tolerance_calc(Calculation.average_RO(self.array_RO),
                                                                   Calculation.average_BO(self.array_BO)
                                                                   )
            self.result_list[24] = self.tolerance_factor_val[0]
            self.result_list[25] = self.tolerance_factor_val[1]
            self.result_list[26] = self.tolerance_factor_val[2]
            self.result_list[27] = self.tolerance_factor_val[3]
            self.calculated.append('tolerance factor cn8 =' + str(self.tolerance_factor_val[0]))
            self.calculated.append('tolerance factor cn9 =' + str(self.tolerance_factor_val[1]))
            self.calculated.append('tolerance factor cn10 =' + str(self.tolerance_factor_val[2]))
            self.calculated.append('tolerance factor cn12 =' + str(self.tolerance_factor_val[3]))
            print('tolerance factor ', self.tolerance_factor_val)

        elif self.struc == 0:
            self.tolerance_factor_val = Calculation.tolerance_calc(Calculation.average_RO_rh(self.array_RO),
                                                                   Calculation.average_BO_rh(self.array_BO)
                                                                   )
            self.result_list[25] = self.tolerance_factor_val[0]
            self.result_list[27] = self.tolerance_factor_val[1]
            self.calculated.append('tolerance factor cn9 =' + str(self.tolerance_factor_val[0]))
            self.calculated.append('tolerance factor cn12 =' + str(self.tolerance_factor_val[1]))
            print('tolerance factor ', self.tolerance_factor_val)

    def calculate_bandwidth_func(self):
        Ui_my_window.clicker_any(self)
        z = []
        if self.value_BOB == z or self.array_BO == z:
            print("Перерахувати у більшій коордиаційній сфері \n")
        elif self.struc == 1:
            self.bandwidth_val = Calculation.calculate_banthwidth(Calculation.average_BO(self.array_BO),
                                                              Calculation.average_Theta(self.value_BOB))
            self.result_list[28] = self.bandwidth_val
            self.calculated.append('bandwidth = ' + str(self.bandwidth_val))
            print('bandwidth =', self.bandwidth_val)

        elif self.struc == 0:
            self.bandwidth_val = Calculation.calculate_banthwidth_rh(Calculation.average_BO_rh(self.array_BO),
                                                              Calculation.average_Theta_rh(self.value_BOB))
            self.result_list[28] = self.bandwidth_val
            self.calculated.append('bandwidth = ' + str(self.bandwidth_val))
            print('bandwidth =', self.bandwidth_val)

    def calc_all_func(self):
        Ui_my_window.calculate_ave_RR_func(self)
        Ui_my_window.calculate_ave_RB_func(self)
        Ui_my_window.calculate_ave_BB_func(self)
        Ui_my_window.calculate_ave_RO_func(self)
        Ui_my_window.calculate_ave_BO_func(self)
        Ui_my_window.calculate_ave_OO_func(self)
        Ui_my_window.calculate_maxmin_RB_func(self)
        Ui_my_window.calculate_ave_RRBB_func(self)
        Ui_my_window.calculate_def_RR_func(self)
        Ui_my_window.calculate_def_RB_func(self)
        Ui_my_window.calculate_def_BB_func(self)
        Ui_my_window.calculate_def_RO_func(self)
        Ui_my_window.calculate_def_BO_func(self)
        Ui_my_window.calculate_ave_Theta_func(self)
        Ui_my_window.calculate_tolerance_func(self)
        Ui_my_window.calculate_bandwidth_func(self)
        Ui_my_window.clicker_any(self)
        print('results', self.result_list)

    def make_report_func(self):
        self.export_to_file.setEnabled(True)
        self.calculated.clear()
        self.click_count = self.click_count + 1

        if self.click_count == 1:
            last_mas_array = Ui_my_window.make_list(self)
            self.array_1 = last_mas_array[0]
            self.array_2 = last_mas_array[1]
            self.ind1 = last_mas_array[2]
            self.ind2 = last_mas_array[3]


        if self.click_count !=1 :
            for i in range(len(self.ind1)):
                calc = '    ' + str(self.all_variables[self.ind1[i]])
                self.array_1[i] = self.array_1[i] + calc

            for i in range(len(self.ind2)):
                calc = '    ' + str(self.result_list[self.ind2[i]])
                self.array_2[i] = self.array_2[i] + calc

            for i in range(len(self.array_1)):
                self.calculated.append(self.array_1[i])
            self.calculated.append('\n Results \n')
            for i in range(len(self.array_2)):
                self.calculated.append(self.array_2[i])


    def make_list(self):
        summ1 = []
        summ2 = []
        ind1_sum = []
        ind2_sum = []
        for i in range(len(self.all_etalons)):
            if self.all_variables[i] != '*':
                calc = str(self.all_etalons[i]) + '    ' + str(self.all_variables[i])
                summ1.append(calc)
                ind1_sum.append(i)
                self.calculated.append(calc)

        self.calculated.append('\n Results \n')
        for i in range(len(self.etalon_list_calc)):
            if self.result_list[i] != '*':
                calc = str(self.etalon_list_calc[i]) + '    ' + str(self.result_list[i])
                summ2.append(calc)
                ind2_sum.append(i)
                self.calculated.append(calc)

        return summ1, summ2, ind1_sum, ind2_sum

# формування результатів для запису
    def get_etalons_list(self, sym, value):
        et = []
        et.append(sym)
        et = et + value
        return et

    def get_variables_list(self, etalon, value):
        varial = []
        if len(etalon) == len(value):
            varial.append('  ')
            varial = varial + value
        else:
            for i in range(len(etalon)+1):
                varial.append('*')

        return varial

    def showDialogWrite(self):
        fileworker.showDialogWrite(fileworker, self.array_1, self.array_2)

    def clicker_any(self):
        self.make_report.setEnabled(True)

    def clear_all_func(self):
        self.variables.clear()
        self.calculated.clear()
        self.Orthorombic.setEnabled(True)
        self.Rhombohedral.setEnabled(True)
        self.import_out_button.setEnabled(False)
        self.make_report.setEnabled(False)
        self.Check_buttom.setEnabled(False)




    def retranslateUi(self, my_window):
        _translate = QtCore.QCoreApplication.translate
        my_window.setWindowTitle(_translate("my_window", "MainWindow"))
        self.Rhombohedral.setText(_translate("my_window", "Rhombohedral"))
        self.Orthorombic.setText(_translate("my_window", "Orthorombic"))
        self.Save_structure.setText(_translate("my_window", "Save structure"))
        self.R.setText(_translate("my_window", "R"))
        self.B.setText(_translate("my_window", "B"))
        self.import_out_button.setText(_translate("my_window", "Import *.out file"))
        self.name.setText(_translate("my_window", "name"))
        self.Check_buttom.setText(_translate("my_window", "Check"))
        self.clear_but.setText(_translate("my_window", "Clear"))
        self.ave_AA.setText(_translate("my_window", "<AA>"))
        self.ave_AB.setText(_translate("my_window", "<AB>"))
        self.ave_BB.setText(_translate("my_window", "<BB>"))
        self.ave_AO.setText(_translate("my_window", "<AO>"))
        self.ave_BO.setText(_translate("my_window", "<BO>"))
        self.ave_OO.setText(_translate("my_window", "<OO>"))
        self.ave_AA_BB.setText(_translate("my_window", "<AA>/<BB>"))
        self.maxmin_AB.setText(_translate("my_window", "AB(max/min)"))
        self.ave_Theta.setText(_translate("my_window", "<Theta>"))
        self.def_AA.setText(_translate("my_window", "d(AA)"))
        self.def_AB.setText(_translate("my_window", "d(AB)"))
        self.def_BB.setText(_translate("my_window", "d(BB)"))
        self.def_AO.setText(_translate("my_window", "d(AO)"))
        self.def_BO.setText(_translate("my_window", "d(BO)"))
        self.tolerance_factor.setText(_translate("my_window", "Tolerance"))
        self.bandwidth.setText(_translate("my_window", "Bandwidth"))
        self.Calculate_all.setText(_translate("my_window", "Calculate All"))
        self.label_3.setText(_translate("my_window", "Bonds"))
        self.Export_AA_AB_BB.setText(_translate("my_window", "Export AA, AB, BB"))
        self.Export_AO_BO.setText(_translate("my_window", "Export AO, BO"))
        self.Export_OO.setText(_translate("my_window", "Export OO"))
        self.label.setText(_translate("my_window", "Angles"))
        self.Angle_B_B_B.setText(_translate("my_window", "Export B-B-B angle"))
        self.Angle_B_O_B.setText(_translate("my_window", "Export B-O-B angle"))
        self.make_report.setText(_translate("my_window", "Report"))
        self.Save_results.setText(_translate("my_window", "Save "))
        self.export_to_file.setText(_translate("my_window", "Export to file"))
        self.toolBar.setWindowTitle(_translate("my_window", "toolBar"))
        self.toolBar_2.setWindowTitle(_translate("my_window", "toolBar_2"))